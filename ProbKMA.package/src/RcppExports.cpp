// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;
using namespace arma;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// compute_Jk_rcpp
double compute_Jk_rcpp(const List& v, const ivec& s_k, const vec& p_k, const List& Y, double alpha, const vec& w, int m, bool use0, bool use1, const Function& domain, const Function& select_domain, const Function& diss_d0_d1_L2, Nullable<int> c_k, Nullable<LogicalVector> keep_k);
RcppExport SEXP _ProbKMA_package_compute_Jk_rcpp(SEXP vSEXP, SEXP s_kSEXP, SEXP p_kSEXP, SEXP YSEXP, SEXP alphaSEXP, SEXP wSEXP, SEXP mSEXP, SEXP use0SEXP, SEXP use1SEXP, SEXP domainSEXP, SEXP select_domainSEXP, SEXP diss_d0_d1_L2SEXP, SEXP c_kSEXP, SEXP keep_kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type v(vSEXP);
    Rcpp::traits::input_parameter< const ivec& >::type s_k(s_kSEXP);
    Rcpp::traits::input_parameter< const vec& >::type p_k(p_kSEXP);
    Rcpp::traits::input_parameter< const List& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< bool >::type use0(use0SEXP);
    Rcpp::traits::input_parameter< bool >::type use1(use1SEXP);
    Rcpp::traits::input_parameter< const Function& >::type domain(domainSEXP);
    Rcpp::traits::input_parameter< const Function& >::type select_domain(select_domainSEXP);
    Rcpp::traits::input_parameter< const Function& >::type diss_d0_d1_L2(diss_d0_d1_L2SEXP);
    Rcpp::traits::input_parameter< Nullable<int> >::type c_k(c_kSEXP);
    Rcpp::traits::input_parameter< Nullable<LogicalVector> >::type keep_k(keep_kSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_Jk_rcpp(v, s_k, p_k, Y, alpha, w, m, use0, use1, domain, select_domain, diss_d0_d1_L2, c_k, keep_k));
    return rcpp_result_gen;
END_RCPP
}
// elongate_motifs
void elongate_motifs(List& V_new, List& V_dom, List& S_k, const List& P_k, const List& Y, const vec& w, int m, bool use0, bool use1, double alpha, const ivec& c, const ivec& c_max, double max_elong, double deltaJk_elong, int trials_elong, const mat& D, unsigned int K, double max_gap);
RcppExport SEXP _ProbKMA_package_elongate_motifs(SEXP V_newSEXP, SEXP V_domSEXP, SEXP S_kSEXP, SEXP P_kSEXP, SEXP YSEXP, SEXP wSEXP, SEXP mSEXP, SEXP use0SEXP, SEXP use1SEXP, SEXP alphaSEXP, SEXP cSEXP, SEXP c_maxSEXP, SEXP max_elongSEXP, SEXP deltaJk_elongSEXP, SEXP trials_elongSEXP, SEXP DSEXP, SEXP KSEXP, SEXP max_gapSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List& >::type V_new(V_newSEXP);
    Rcpp::traits::input_parameter< List& >::type V_dom(V_domSEXP);
    Rcpp::traits::input_parameter< List& >::type S_k(S_kSEXP);
    Rcpp::traits::input_parameter< const List& >::type P_k(P_kSEXP);
    Rcpp::traits::input_parameter< const List& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< bool >::type use0(use0SEXP);
    Rcpp::traits::input_parameter< bool >::type use1(use1SEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const ivec& >::type c(cSEXP);
    Rcpp::traits::input_parameter< const ivec& >::type c_max(c_maxSEXP);
    Rcpp::traits::input_parameter< double >::type max_elong(max_elongSEXP);
    Rcpp::traits::input_parameter< double >::type deltaJk_elong(deltaJk_elongSEXP);
    Rcpp::traits::input_parameter< int >::type trials_elong(trials_elongSEXP);
    Rcpp::traits::input_parameter< const mat& >::type D(DSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type max_gap(max_gapSEXP);
    elongate_motifs(V_new, V_dom, S_k, P_k, Y, w, m, use0, use1, alpha, c, c_max, max_elong, deltaJk_elong, trials_elong, D, K, max_gap);
    return R_NilValue;
END_RCPP
}
// elongation_rcpp
List elongation_rcpp(const List& v_new_k, const arma::uvec& v_dom_k, const arma::ivec& s_k, const vec& p_k, const arma::ivec& len_elong_k, const arma::uvec& keep_k, double c, const Function& domain, const Function& compute_motif, bool use0, bool use1, const vec& w, double alpha, double max_gap, const List& Y, int m, double deltaJk_elong);
RcppExport SEXP _ProbKMA_package_elongation_rcpp(SEXP v_new_kSEXP, SEXP v_dom_kSEXP, SEXP s_kSEXP, SEXP p_kSEXP, SEXP len_elong_kSEXP, SEXP keep_kSEXP, SEXP cSEXP, SEXP domainSEXP, SEXP compute_motifSEXP, SEXP use0SEXP, SEXP use1SEXP, SEXP wSEXP, SEXP alphaSEXP, SEXP max_gapSEXP, SEXP YSEXP, SEXP mSEXP, SEXP deltaJk_elongSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type v_new_k(v_new_kSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type v_dom_k(v_dom_kSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type s_k(s_kSEXP);
    Rcpp::traits::input_parameter< const vec& >::type p_k(p_kSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type len_elong_k(len_elong_kSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type keep_k(keep_kSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< const Function& >::type domain(domainSEXP);
    Rcpp::traits::input_parameter< const Function& >::type compute_motif(compute_motifSEXP);
    Rcpp::traits::input_parameter< bool >::type use0(use0SEXP);
    Rcpp::traits::input_parameter< bool >::type use1(use1SEXP);
    Rcpp::traits::input_parameter< const vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type max_gap(max_gapSEXP);
    Rcpp::traits::input_parameter< const List& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type deltaJk_elong(deltaJk_elongSEXP);
    rcpp_result_gen = Rcpp::wrap(elongation_rcpp(v_new_k, v_dom_k, s_k, p_k, len_elong_k, keep_k, c, domain, compute_motif, use0, use1, w, alpha, max_gap, Y, m, deltaJk_elong));
    return rcpp_result_gen;
END_RCPP
}
// find_diss
NumericVector find_diss(const List& y, const List& v, const NumericVector& w, double alpha, unsigned int c_k, unsigned int d, bool use0, bool use1, const Function& domain, const Function& select_domain, const Function& diss_d0_d1_L2);
RcppExport SEXP _ProbKMA_package_find_diss(SEXP ySEXP, SEXP vSEXP, SEXP wSEXP, SEXP alphaSEXP, SEXP c_kSEXP, SEXP dSEXP, SEXP use0SEXP, SEXP use1SEXP, SEXP domainSEXP, SEXP select_domainSEXP, SEXP diss_d0_d1_L2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const List& >::type v(vSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type w(wSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type c_k(c_kSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type d(dSEXP);
    Rcpp::traits::input_parameter< bool >::type use0(use0SEXP);
    Rcpp::traits::input_parameter< bool >::type use1(use1SEXP);
    Rcpp::traits::input_parameter< const Function& >::type domain(domainSEXP);
    Rcpp::traits::input_parameter< const Function& >::type select_domain(select_domainSEXP);
    Rcpp::traits::input_parameter< const Function& >::type diss_d0_d1_L2(diss_d0_d1_L2SEXP);
    rcpp_result_gen = Rcpp::wrap(find_diss(y, v, w, alpha, c_k, d, use0, use1, domain, select_domain, diss_d0_d1_L2));
    return rcpp_result_gen;
END_RCPP
}
// find_occurrences
arma::mat find_occurrences(const Rcpp::List& v, const Rcpp::List& Y, const double R, const double alpha, const double w, const double c_k, const bool use0, const bool use1);
RcppExport SEXP _ProbKMA_package_find_occurrences(SEXP vSEXP, SEXP YSEXP, SEXP RSEXP, SEXP alphaSEXP, SEXP wSEXP, SEXP c_kSEXP, SEXP use0SEXP, SEXP use1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type v(vSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const double >::type R(RSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double >::type w(wSEXP);
    Rcpp::traits::input_parameter< const double >::type c_k(c_kSEXP);
    Rcpp::traits::input_parameter< const bool >::type use0(use0SEXP);
    Rcpp::traits::input_parameter< const bool >::type use1(use1SEXP);
    rcpp_result_gen = Rcpp::wrap(find_occurrences(v, Y, R, alpha, w, c_k, use0, use1));
    return rcpp_result_gen;
END_RCPP
}
// select_motif
IntegerVector select_motif(const mat& D_clean, const vec& V_length, uvec& V_hclust, const vec& R_m, double length_diff, unsigned int n_hclust);
RcppExport SEXP _ProbKMA_package_select_motif(SEXP D_cleanSEXP, SEXP V_lengthSEXP, SEXP V_hclustSEXP, SEXP R_mSEXP, SEXP length_diffSEXP, SEXP n_hclustSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const mat& >::type D_clean(D_cleanSEXP);
    Rcpp::traits::input_parameter< const vec& >::type V_length(V_lengthSEXP);
    Rcpp::traits::input_parameter< uvec& >::type V_hclust(V_hclustSEXP);
    Rcpp::traits::input_parameter< const vec& >::type R_m(R_mSEXP);
    Rcpp::traits::input_parameter< double >::type length_diff(length_diffSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_hclust(n_hclustSEXP);
    rcpp_result_gen = Rcpp::wrap(select_motif(D_clean, V_length, V_hclust, R_m, length_diff, n_hclust));
    return rcpp_result_gen;
END_RCPP
}
// find_diss_aligned_rcpp
NumericVector find_diss_aligned_rcpp(const List& y, const List& v, const vec& w, double alpha, bool aligned, unsigned int d, bool use0, bool use1);
RcppExport SEXP _ProbKMA_package_find_diss_aligned_rcpp(SEXP ySEXP, SEXP vSEXP, SEXP wSEXP, SEXP alphaSEXP, SEXP alignedSEXP, SEXP dSEXP, SEXP use0SEXP, SEXP use1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const List& >::type v(vSEXP);
    Rcpp::traits::input_parameter< const vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< bool >::type aligned(alignedSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type d(dSEXP);
    Rcpp::traits::input_parameter< bool >::type use0(use0SEXP);
    Rcpp::traits::input_parameter< bool >::type use1(use1SEXP);
    rcpp_result_gen = Rcpp::wrap(find_diss_aligned_rcpp(y, v, w, alpha, aligned, d, use0, use1));
    return rcpp_result_gen;
END_RCPP
}
// probKMA_silhouette_rcpp
List probKMA_silhouette_rcpp(const List& probKMA_results, bool align);
RcppExport SEXP _ProbKMA_package_probKMA_silhouette_rcpp(SEXP probKMA_resultsSEXP, SEXP alignSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type probKMA_results(probKMA_resultsSEXP);
    Rcpp::traits::input_parameter< bool >::type align(alignSEXP);
    rcpp_result_gen = Rcpp::wrap(probKMA_silhouette_rcpp(probKMA_results, align));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ProbKMA_package_compute_Jk_rcpp", (DL_FUNC) &_ProbKMA_package_compute_Jk_rcpp, 14},
    {"_ProbKMA_package_elongate_motifs", (DL_FUNC) &_ProbKMA_package_elongate_motifs, 18},
    {"_ProbKMA_package_elongation_rcpp", (DL_FUNC) &_ProbKMA_package_elongation_rcpp, 17},
    {"_ProbKMA_package_find_diss", (DL_FUNC) &_ProbKMA_package_find_diss, 11},
    {"_ProbKMA_package_find_occurrences", (DL_FUNC) &_ProbKMA_package_find_occurrences, 8},
    {"_ProbKMA_package_select_motif", (DL_FUNC) &_ProbKMA_package_select_motif, 6},
    {"_ProbKMA_package_find_diss_aligned_rcpp", (DL_FUNC) &_ProbKMA_package_find_diss_aligned_rcpp, 8},
    {"_ProbKMA_package_probKMA_silhouette_rcpp", (DL_FUNC) &_ProbKMA_package_probKMA_silhouette_rcpp, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_ProbKMA_package(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
