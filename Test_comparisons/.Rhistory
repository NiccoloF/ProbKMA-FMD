list(v0=matrix(bb_3_60$motif,ncol=1),v1=matrix(bb_3_60$motif_derivative,ncol=1)),
list(v0=matrix(cc_3_60$motif,ncol=1),v1=matrix(cc_3_60$motif_derivative,ncol=1)))
}
#Decreasing lines
for(i in 10:10){
a_4_40=motifs_line_rev(40,10,40,80,100)
b_4_40=motifs_line_rev(40,10,40,80,100)
V_initt[[1]][[1]][[i]]=list(list(v0=(matrix(a_4_40$motif,ncol=1)),v1=(matrix(a_4_40$motif_derivative,ncol=1))),
list(v0=(matrix(b_4_40$motif,ncol=1)),v1=(matrix(b_4_40$motif_derivative,ncol=1))))
a_4_50=motifs_line_rev(50,10,40,80,100)
b_4_50=motifs_line_rev(50,10,40,80,100)
V_initt[[1]][[2]][[i]]=list(list(v0=(matrix(a_4_50$motif,ncol=1)),v1=(matrix(a_4_50$motif_derivative,ncol=1))),
list(v0=(matrix(b_4_50$motif,ncol=1)),v1=(matrix(b_4_50$motif_derivative,ncol=1))))
a_4_60=motifs_line_rev(60,10,40,80,100)
b_4_60=motifs_line_rev(60,10,40,80,100)
V_initt[[1]][[3]][[i]]=list(list(v0=(matrix(a_4_60$motif,ncol=1)),v1=(matrix(a_4_60$motif_derivative,ncol=1))),
list(v0=(matrix(b_4_60$motif,ncol=1)),v1=(matrix(b_4_60$motif_derivative,ncol=1))))
aa_4_40=motifs_line_rev(40,10,40,80,100)
bb_4_40=motifs_line_rev(40,10,40,80,100)
cc_4_40=motifs_line_rev(40,10,40,80,100)
V_initt[[2]][[1]][[i]]=list(list(v0=matrix(aa_4_40$motif,ncol=1),v1=matrix(aa_4_40$motif_derivative,ncol=1)),
list(v0=matrix(bb_4_40$motif,ncol=1),v1=matrix(bb_4_40$motif_derivative,ncol=1)),
list(v0=matrix(cc_4_40$motif,ncol=1),v1=matrix(cc_4_40$motif_derivative,ncol=1)))
aa_4_50=motifs_line_rev(50,10,40,80,100)
bb_4_50=motifs_line_rev(50,10,40,80,100)
cc_4_50=motifs_line_rev(50,10,40,80,100)
V_initt[[2]][[2]][[i]]=list(list(v0=matrix(aa_4_50$motif,ncol=1),v1=matrix(aa_4_50$motif_derivative,ncol=1)),
list(v0=matrix(bb_4_50$motif,ncol=1),v1=matrix(bb_4_50$motif_derivative,ncol=1)),
list(v0=matrix(cc_4_50$motif,ncol=1),v1=matrix(cc_4_50$motif_derivative,ncol=1)))
aa_4_60=motifs_line_rev(60,10,40,80,100)
bb_4_60=motifs_line_rev(60,10,40,80,100)
cc_4_60=motifs_line_rev(60,10,40,80,100)
V_initt[[2]][[3]][[i]]=list(list(v0=matrix(aa_4_60$motif,ncol=1),v1=matrix(aa_4_60$motif_derivative,ncol=1)),
list(v0=matrix(bb_4_60$motif,ncol=1),v1=matrix(bb_4_60$motif_derivative,ncol=1)),
list(v0=matrix(cc_4_60$motif,ncol=1),v1=matrix(cc_4_60$motif_derivative,ncol=1)))
}
V_init=V_initt
K = c(2, 3) # number of clusters to try
c=c(40,50)
n_init = 4 # number of partially random initializations to try
# resize V_init
V_init[[1]] <- list(V_init[[1]][[1]],V_init[[1]][[2]])
V_init[[2]] <- list(V_init[[2]][[1]],V_init[[2]][[2]])
V_init[[1]][[1]] <- list(V_init[[1]][[1]][[1]],V_init[[1]][[1]][[2]],V_init[[1]][[1]][[3]],V_init[[1]][[1]][[4]])
V_init[[1]][[2]] <- list(V_init[[1]][[2]][[1]],V_init[[1]][[2]][[2]],V_init[[1]][[2]][[3]],V_init[[1]][[2]][[4]])
V_init[[2]][[1]] <- list(V_init[[2]][[1]][[1]],V_init[[2]][[1]][[2]],V_init[[2]][[1]][[3]],V_init[[2]][[1]][[4]])
V_init[[2]][[2]] <- list(V_init[[2]][[2]][[1]],V_init[[2]][[2]][[2]],V_init[[2]][[2]][[3]],V_init[[2]][[2]][[4]])
View(V_init)
#It is necessary to use the candidate motifs in the folder
#motifs_partially_random in order to obtain the identical results of
#the article.
Y0=Y1=list()
for(i in 1:length(data_smoothed)){
Y0[[i]]=matrix(data_smoothed[[i]]$v0,ncol=1)
Y1[[i]]=matrix(data_smoothed[[i]]$v1,ncol=1)#Just the uncorrelated stocks
}
# find candidate motifs
find_candidate_motifs_results = ProbKMAcpp::find_candidate_motifs(Y0, Y1, K, c, n_init,V_init=V_init,
name = '../Test_comparisons/results/our/stock.1', names_var = 'x(t)',
probKMA_options = list(c_max = c_max, standardize = FALSE, iter_max = 1000,
iter4elong = iter4elong, trials_elong = trials_elong, max_gap = max_gap,
return_options = TRUE, return_init = TRUE,
diss = diss, alpha = alpha,transformed=TRUE),
plot = TRUE, exe_print = FALSE, n_threads = 7, set_seed = TRUE, worker_number = 1)
source(file ="../Test_comparisons/previous_ProbKMA.R")
load("../Test_comparisons/data_wrds.Rdata",smoothed_part2_env <- new.env())
data_smoothed=smoothed_part2_env$data_smoothed
ncurves=length(data_smoothed)
#######################
###     RUN FMD     ###
#######################
set.seed(13333)
# use Sobolev-like distance d_0.5
diss = 'd0_d1_L2'
alpha = 0.9
max_gap = 0 # no gaps allowed
iter4elong =1 #5-10 # perform elongation
trials_elong =150 # try all possible elongations 60-70
c_max = 150 # maximum motif length 60-70
initializations=10
n_init = initializations # number of random initializations to try
V_initt=list()
V_initt[[1]]=list()         #2 clusters
V_initt[[1]][[1]]=list() #2 clusters of length 40
V_initt[[1]][[2]]=list() #2 clusters of length 50
V_initt[[1]][[3]]=list() #2 clusters of length 60
V_initt[[2]]=list()           #3 clusters
V_initt[[2]][[1]]=list()   #3 clusters of length 40
V_initt[[2]][[2]]=list()   #3 clusters of length 50
V_initt[[2]][[3]]=list()   #3 clusters of length 60
for(i in 1:4){
a40=motifs_init(40,10,40,80,100)
b40=motifs_init(40,10,40,80,100)
V_initt[[1]][[1]][[i]]=list(list(v0=(matrix(a40$motif,ncol=1)),v1=(matrix(a40$motif_derivative,ncol=1))),
list(v0=(matrix(b40$motif,ncol=1)),v1=(matrix(b40$motif_derivative,ncol=1))))
a50=motifs_init(50,10,40,80,100)
b50=motifs_init(50,10,40,80,100)
V_initt[[1]][[2]][[i]]=list(list(v0=(matrix(a50$motif,ncol=1)),v1=(matrix(a50$motif_derivative,ncol=1))),
list(v0=(matrix(b50$motif,ncol=1)),v1=(matrix(b50$motif_derivative,ncol=1))))
a60=motifs_init(60,10,40,80,100)
b60=motifs_init(60,10,40,80,100)
V_initt[[1]][[3]][[i]]=list(list(v0=(matrix(a60$motif,ncol=1)),v1=(matrix(a60$motif_derivative,ncol=1))),
list(v0=(matrix(b60$motif,ncol=1)),v1=(matrix(b60$motif_derivative,ncol=1))))
aa40=motifs_init(40,10,40,80,100)
bb40=motifs_init(40,10,40,80,100)
cc40=motifs_init(40,10,40,80,100)
V_initt[[2]][[1]][[i]]=list(list(v0=matrix(aa40$motif,ncol=1),v1=matrix(aa40$motif_derivative,ncol=1)),
list(v0=matrix(bb40$motif,ncol=1),v1=matrix(bb40$motif_derivative,ncol=1)),
list(v0=matrix(cc40$motif,ncol=1),v1=matrix(cc40$motif_derivative,ncol=1)))
aa50=motifs_init(50,10,40,80,100)
bb50=motifs_init(50,10,40,80,100)
cc50=motifs_init(50,10,40,80,100)
V_initt[[2]][[2]][[i]]=list(list(v0=matrix(aa50$motif,ncol=1),v1=matrix(aa50$motif_derivative,ncol=1)),
list(v0=matrix(bb50$motif,ncol=1),v1=matrix(bb50$motif_derivative,ncol=1)),
list(v0=matrix(cc50$motif,ncol=1),v1=matrix(cc50$motif_derivative,ncol=1)))
aa60=motifs_init(60,10,40,80,100)
bb60=motifs_init(60,10,40,80,100)
cc60=motifs_init(60,10,40,80,100)
V_initt[[2]][[3]][[i]]=list(list(v0=matrix(aa60$motif,ncol=1),v1=matrix(aa60$motif_derivative,ncol=1)),
list(v0=matrix(bb60$motif,ncol=1),v1=matrix(bb60$motif_derivative,ncol=1)),
list(v0=matrix(cc60$motif,ncol=1),v1=matrix(cc60$motif_derivative,ncol=1)))
}
for(i in 5:8){
a_2_40=motifs_init_rev(40,10,40,80,100)
b_2_40=motifs_init_rev(40,10,40,80,100)
V_initt[[1]][[1]][[i]]=list(list(v0=(matrix(a_2_40$motif,ncol=1)),v1=(matrix(a_2_40$motif_derivative,ncol=1))),
list(v0=(matrix(b_2_40$motif,ncol=1)),v1=(matrix(b_2_40$motif_derivative,ncol=1))))
a_2_50=motifs_init_rev(50,10,40,80,100)
b_2_50=motifs_init_rev(50,10,40,80,100)
V_initt[[1]][[2]][[i]]=list(list(v0=(matrix(a_2_50$motif,ncol=1)),v1=(matrix(a_2_50$motif_derivative,ncol=1))),
list(v0=(matrix(b_2_50$motif,ncol=1)),v1=(matrix(b_2_50$motif_derivative,ncol=1))))
a_2_60=motifs_init_rev(60,10,40,80,100)
b_2_60=motifs_init_rev(60,10,40,80,100)
V_initt[[1]][[3]][[i]]=list(list(v0=(matrix(a_2_60$motif,ncol=1)),v1=(matrix(a_2_60$motif_derivative,ncol=1))),
list(v0=(matrix(b_2_60$motif,ncol=1)),v1=(matrix(b_2_60$motif_derivative,ncol=1))))
aa_2_40=motifs_init_rev(40,10,40,80,100)
bb_2_40=motifs_init_rev(40,10,40,80,100)
cc_2_40=motifs_init_rev(40,10,40,80,100)
V_initt[[2]][[1]][[i]]=list(list(v0=matrix(aa_2_40$motif,ncol=1),v1=matrix(aa_2_40$motif_derivative,ncol=1)),
list(v0=matrix(bb_2_40$motif,ncol=1),v1=matrix(bb_2_40$motif_derivative,ncol=1)),
list(v0=matrix(cc_2_40$motif,ncol=1),v1=matrix(cc_2_40$motif_derivative,ncol=1)))
aa_2_50=motifs_init_rev(50,10,40,80,100)
bb_2_50=motifs_init_rev(50,10,40,80,100)
cc_2_50=motifs_init_rev(50,10,40,80,100)
V_initt[[2]][[2]][[i]]=list(list(v0=matrix(aa_2_50$motif,ncol=1),v1=matrix(aa_2_50$motif_derivative,ncol=1)),
list(v0=matrix(bb_2_50$motif,ncol=1),v1=matrix(bb_2_50$motif_derivative,ncol=1)),
list(v0=matrix(cc_2_50$motif,ncol=1),v1=matrix(cc_2_50$motif_derivative,ncol=1)))
aa_2_60=motifs_init_rev(60,10,40,80,100)
bb_2_60=motifs_init_rev(60,10,40,80,100)
cc_2_60=motifs_init_rev(60,10,40,80,100)
V_initt[[2]][[3]][[i]]=list(list(v0=matrix(aa_2_60$motif,ncol=1),v1=matrix(aa_2_60$motif_derivative,ncol=1)),
list(v0=matrix(bb_2_60$motif,ncol=1),v1=matrix(bb_2_60$motif_derivative,ncol=1)),
list(v0=matrix(cc_2_60$motif,ncol=1),v1=matrix(cc_2_60$motif_derivative,ncol=1)))
}
#Increasing lines
for(i in 9:9){
a_3_40=motifs_line(40,10,40,80,100)
b_3_40=motifs_line(40,10,40,80,100)
V_initt[[1]][[1]][[i]]=list(list(v0=(matrix(a_3_40$motif,ncol=1)),v1=(matrix(a_3_40$motif_derivative,ncol=1))),
list(v0=(matrix(b_3_40$motif,ncol=1)),v1=(matrix(b_3_40$motif_derivative,ncol=1))))
a_3_50=motifs_line(50,10,40,80,100)
b_3_50=motifs_line(50,10,40,80,100)
V_initt[[1]][[2]][[i]]=list(list(v0=(matrix(a_3_50$motif,ncol=1)),v1=(matrix(a_3_50$motif_derivative,ncol=1))),
list(v0=(matrix(b_3_50$motif,ncol=1)),v1=(matrix(b_3_50$motif_derivative,ncol=1))))
a_3_60=motifs_line(60,10,40,80,100)
b_3_60=motifs_line(60,10,40,80,100)
V_initt[[1]][[3]][[i]]=list(list(v0=(matrix(a_3_60$motif,ncol=1)),v1=(matrix(a_3_60$motif_derivative,ncol=1))),
list(v0=(matrix(b_3_60$motif,ncol=1)),v1=(matrix(b_3_60$motif_derivative,ncol=1))))
aa_3_40=motifs_line(40,10,40,80,100)
bb_3_40=motifs_line(40,10,40,80,100)
cc_3_40=motifs_line(40,10,40,80,100)
V_initt[[2]][[1]][[i]]=list(list(v0=matrix(aa_3_40$motif,ncol=1),v1=matrix(aa_3_40$motif_derivative,ncol=1)),
list(v0=matrix(bb_3_40$motif,ncol=1),v1=matrix(bb_3_40$motif_derivative,ncol=1)),
list(v0=matrix(cc_3_40$motif,ncol=1),v1=matrix(cc_3_40$motif_derivative,ncol=1)))
aa_3_50=motifs_line(50,10,40,80,100)
bb_3_50=motifs_line(50,10,40,80,100)
cc_3_50=motifs_line(50,10,40,80,100)
V_initt[[2]][[2]][[i]]=list(list(v0=matrix(aa_3_50$motif,ncol=1),v1=matrix(aa_3_50$motif_derivative,ncol=1)),
list(v0=matrix(bb_3_50$motif,ncol=1),v1=matrix(bb_3_50$motif_derivative,ncol=1)),
list(v0=matrix(cc_3_50$motif,ncol=1),v1=matrix(cc_3_50$motif_derivative,ncol=1)))
aa_3_60=motifs_line(60,10,40,80,100)
bb_3_60=motifs_line(60,10,40,80,100)
cc_3_60=motifs_line(60,10,40,80,100)
V_initt[[2]][[3]][[i]]=list(list(v0=matrix(aa_3_60$motif,ncol=1),v1=matrix(aa_3_60$motif_derivative,ncol=1)),
list(v0=matrix(bb_3_60$motif,ncol=1),v1=matrix(bb_3_60$motif_derivative,ncol=1)),
list(v0=matrix(cc_3_60$motif,ncol=1),v1=matrix(cc_3_60$motif_derivative,ncol=1)))
}
#Decreasing lines
for(i in 10:10){
a_4_40=motifs_line_rev(40,10,40,80,100)
b_4_40=motifs_line_rev(40,10,40,80,100)
V_initt[[1]][[1]][[i]]=list(list(v0=(matrix(a_4_40$motif,ncol=1)),v1=(matrix(a_4_40$motif_derivative,ncol=1))),
list(v0=(matrix(b_4_40$motif,ncol=1)),v1=(matrix(b_4_40$motif_derivative,ncol=1))))
a_4_50=motifs_line_rev(50,10,40,80,100)
b_4_50=motifs_line_rev(50,10,40,80,100)
V_initt[[1]][[2]][[i]]=list(list(v0=(matrix(a_4_50$motif,ncol=1)),v1=(matrix(a_4_50$motif_derivative,ncol=1))),
list(v0=(matrix(b_4_50$motif,ncol=1)),v1=(matrix(b_4_50$motif_derivative,ncol=1))))
a_4_60=motifs_line_rev(60,10,40,80,100)
b_4_60=motifs_line_rev(60,10,40,80,100)
V_initt[[1]][[3]][[i]]=list(list(v0=(matrix(a_4_60$motif,ncol=1)),v1=(matrix(a_4_60$motif_derivative,ncol=1))),
list(v0=(matrix(b_4_60$motif,ncol=1)),v1=(matrix(b_4_60$motif_derivative,ncol=1))))
aa_4_40=motifs_line_rev(40,10,40,80,100)
bb_4_40=motifs_line_rev(40,10,40,80,100)
cc_4_40=motifs_line_rev(40,10,40,80,100)
V_initt[[2]][[1]][[i]]=list(list(v0=matrix(aa_4_40$motif,ncol=1),v1=matrix(aa_4_40$motif_derivative,ncol=1)),
list(v0=matrix(bb_4_40$motif,ncol=1),v1=matrix(bb_4_40$motif_derivative,ncol=1)),
list(v0=matrix(cc_4_40$motif,ncol=1),v1=matrix(cc_4_40$motif_derivative,ncol=1)))
aa_4_50=motifs_line_rev(50,10,40,80,100)
bb_4_50=motifs_line_rev(50,10,40,80,100)
cc_4_50=motifs_line_rev(50,10,40,80,100)
V_initt[[2]][[2]][[i]]=list(list(v0=matrix(aa_4_50$motif,ncol=1),v1=matrix(aa_4_50$motif_derivative,ncol=1)),
list(v0=matrix(bb_4_50$motif,ncol=1),v1=matrix(bb_4_50$motif_derivative,ncol=1)),
list(v0=matrix(cc_4_50$motif,ncol=1),v1=matrix(cc_4_50$motif_derivative,ncol=1)))
aa_4_60=motifs_line_rev(60,10,40,80,100)
bb_4_60=motifs_line_rev(60,10,40,80,100)
cc_4_60=motifs_line_rev(60,10,40,80,100)
V_initt[[2]][[3]][[i]]=list(list(v0=matrix(aa_4_60$motif,ncol=1),v1=matrix(aa_4_60$motif_derivative,ncol=1)),
list(v0=matrix(bb_4_60$motif,ncol=1),v1=matrix(bb_4_60$motif_derivative,ncol=1)),
list(v0=matrix(cc_4_60$motif,ncol=1),v1=matrix(cc_4_60$motif_derivative,ncol=1)))
}
V_init=V_initt
K = c(2, 3) # number of clusters to try
c=c(40,50)
n_init = 4 # number of partially random initializations to try
# resize V_init
V_init[[1]] <- list(V_init[[1]][[1]],V_init[[1]][[2]])
V_init[[2]] <- list(V_init[[2]][[1]],V_init[[2]][[2]])
V_init[[1]][[1]] <- list(V_init[[1]][[1]][[1]],V_init[[1]][[1]][[2]],V_init[[1]][[1]][[3]],V_init[[1]][[1]][[4]])
V_init[[1]][[2]] <- list(V_init[[1]][[2]][[1]],V_init[[1]][[2]][[2]],V_init[[1]][[2]][[3]],V_init[[1]][[2]][[4]])
V_init[[2]][[1]] <- list(V_init[[2]][[1]][[1]],V_init[[2]][[1]][[2]],V_init[[2]][[1]][[3]],V_init[[2]][[1]][[4]])
V_init[[2]][[2]] <- list(V_init[[2]][[2]][[1]],V_init[[2]][[2]][[2]],V_init[[2]][[2]][[3]],V_init[[2]][[2]][[4]])
#It is necessary to use the candidate motifs in the folder
#motifs_partially_random in order to obtain the identical results of
#the article.
Y0=Y1=list()
for(i in 1:length(data_smoothed)){
Y0[[i]]=matrix(data_smoothed[[i]]$v0,ncol=1)
Y1[[i]]=matrix(data_smoothed[[i]]$v1,ncol=1)#Just the uncorrelated stocks
}
# find candidate motifs
find_candidate_motifs_results = ProbKMAcpp::find_candidate_motifs(Y0, Y1, K, c, n_init,V_init=V_init,
name = '../Test_comparisons/results/our/stock.1', names_var = 'x(t)',
probKMA_options = list(c_max = c_max, standardize = FALSE, iter_max = 1000,
iter4elong = iter4elong, trials_elong = trials_elong, max_gap = max_gap,
return_options = TRUE, return_init = TRUE,
diss = diss, alpha = alpha,transformed=TRUE),
plot = TRUE, exe_print = FALSE, n_threads = 7, set_seed = TRUE, worker_number = NULL)
warnings()
source(file ="../Test_comparisons/previous_ProbKMA.R")
load("../Test_comparisons/data_wrds.Rdata",smoothed_part2_env <- new.env())
data_smoothed=smoothed_part2_env$data_smoothed
ncurves=length(data_smoothed)
#######################
###     RUN FMD     ###
#######################
set.seed(13333)
# use Sobolev-like distance d_0.5
diss = 'd0_d1_L2'
alpha = 0.9
max_gap = 0 # no gaps allowed
iter4elong =1 #5-10 # perform elongation
trials_elong =150 # try all possible elongations 60-70
c_max = 150 # maximum motif length 60-70
initializations=10
n_init = initializations # number of random initializations to try
V_initt=list()
V_initt[[1]]=list()         #2 clusters
V_initt[[1]][[1]]=list() #2 clusters of length 40
V_initt[[1]][[2]]=list() #2 clusters of length 50
V_initt[[1]][[3]]=list() #2 clusters of length 60
V_initt[[2]]=list()           #3 clusters
V_initt[[2]][[1]]=list()   #3 clusters of length 40
V_initt[[2]][[2]]=list()   #3 clusters of length 50
V_initt[[2]][[3]]=list()   #3 clusters of length 60
for(i in 1:4){
a40=motifs_init(40,10,40,80,100)
b40=motifs_init(40,10,40,80,100)
V_initt[[1]][[1]][[i]]=list(list(v0=(matrix(a40$motif,ncol=1)),v1=(matrix(a40$motif_derivative,ncol=1))),
list(v0=(matrix(b40$motif,ncol=1)),v1=(matrix(b40$motif_derivative,ncol=1))))
a50=motifs_init(50,10,40,80,100)
b50=motifs_init(50,10,40,80,100)
V_initt[[1]][[2]][[i]]=list(list(v0=(matrix(a50$motif,ncol=1)),v1=(matrix(a50$motif_derivative,ncol=1))),
list(v0=(matrix(b50$motif,ncol=1)),v1=(matrix(b50$motif_derivative,ncol=1))))
a60=motifs_init(60,10,40,80,100)
b60=motifs_init(60,10,40,80,100)
V_initt[[1]][[3]][[i]]=list(list(v0=(matrix(a60$motif,ncol=1)),v1=(matrix(a60$motif_derivative,ncol=1))),
list(v0=(matrix(b60$motif,ncol=1)),v1=(matrix(b60$motif_derivative,ncol=1))))
aa40=motifs_init(40,10,40,80,100)
bb40=motifs_init(40,10,40,80,100)
cc40=motifs_init(40,10,40,80,100)
V_initt[[2]][[1]][[i]]=list(list(v0=matrix(aa40$motif,ncol=1),v1=matrix(aa40$motif_derivative,ncol=1)),
list(v0=matrix(bb40$motif,ncol=1),v1=matrix(bb40$motif_derivative,ncol=1)),
list(v0=matrix(cc40$motif,ncol=1),v1=matrix(cc40$motif_derivative,ncol=1)))
aa50=motifs_init(50,10,40,80,100)
bb50=motifs_init(50,10,40,80,100)
cc50=motifs_init(50,10,40,80,100)
V_initt[[2]][[2]][[i]]=list(list(v0=matrix(aa50$motif,ncol=1),v1=matrix(aa50$motif_derivative,ncol=1)),
list(v0=matrix(bb50$motif,ncol=1),v1=matrix(bb50$motif_derivative,ncol=1)),
list(v0=matrix(cc50$motif,ncol=1),v1=matrix(cc50$motif_derivative,ncol=1)))
aa60=motifs_init(60,10,40,80,100)
bb60=motifs_init(60,10,40,80,100)
cc60=motifs_init(60,10,40,80,100)
V_initt[[2]][[3]][[i]]=list(list(v0=matrix(aa60$motif,ncol=1),v1=matrix(aa60$motif_derivative,ncol=1)),
list(v0=matrix(bb60$motif,ncol=1),v1=matrix(bb60$motif_derivative,ncol=1)),
list(v0=matrix(cc60$motif,ncol=1),v1=matrix(cc60$motif_derivative,ncol=1)))
}
for(i in 5:8){
a_2_40=motifs_init_rev(40,10,40,80,100)
b_2_40=motifs_init_rev(40,10,40,80,100)
V_initt[[1]][[1]][[i]]=list(list(v0=(matrix(a_2_40$motif,ncol=1)),v1=(matrix(a_2_40$motif_derivative,ncol=1))),
list(v0=(matrix(b_2_40$motif,ncol=1)),v1=(matrix(b_2_40$motif_derivative,ncol=1))))
a_2_50=motifs_init_rev(50,10,40,80,100)
b_2_50=motifs_init_rev(50,10,40,80,100)
V_initt[[1]][[2]][[i]]=list(list(v0=(matrix(a_2_50$motif,ncol=1)),v1=(matrix(a_2_50$motif_derivative,ncol=1))),
list(v0=(matrix(b_2_50$motif,ncol=1)),v1=(matrix(b_2_50$motif_derivative,ncol=1))))
a_2_60=motifs_init_rev(60,10,40,80,100)
b_2_60=motifs_init_rev(60,10,40,80,100)
V_initt[[1]][[3]][[i]]=list(list(v0=(matrix(a_2_60$motif,ncol=1)),v1=(matrix(a_2_60$motif_derivative,ncol=1))),
list(v0=(matrix(b_2_60$motif,ncol=1)),v1=(matrix(b_2_60$motif_derivative,ncol=1))))
aa_2_40=motifs_init_rev(40,10,40,80,100)
bb_2_40=motifs_init_rev(40,10,40,80,100)
cc_2_40=motifs_init_rev(40,10,40,80,100)
V_initt[[2]][[1]][[i]]=list(list(v0=matrix(aa_2_40$motif,ncol=1),v1=matrix(aa_2_40$motif_derivative,ncol=1)),
list(v0=matrix(bb_2_40$motif,ncol=1),v1=matrix(bb_2_40$motif_derivative,ncol=1)),
list(v0=matrix(cc_2_40$motif,ncol=1),v1=matrix(cc_2_40$motif_derivative,ncol=1)))
aa_2_50=motifs_init_rev(50,10,40,80,100)
bb_2_50=motifs_init_rev(50,10,40,80,100)
cc_2_50=motifs_init_rev(50,10,40,80,100)
V_initt[[2]][[2]][[i]]=list(list(v0=matrix(aa_2_50$motif,ncol=1),v1=matrix(aa_2_50$motif_derivative,ncol=1)),
list(v0=matrix(bb_2_50$motif,ncol=1),v1=matrix(bb_2_50$motif_derivative,ncol=1)),
list(v0=matrix(cc_2_50$motif,ncol=1),v1=matrix(cc_2_50$motif_derivative,ncol=1)))
aa_2_60=motifs_init_rev(60,10,40,80,100)
bb_2_60=motifs_init_rev(60,10,40,80,100)
cc_2_60=motifs_init_rev(60,10,40,80,100)
V_initt[[2]][[3]][[i]]=list(list(v0=matrix(aa_2_60$motif,ncol=1),v1=matrix(aa_2_60$motif_derivative,ncol=1)),
list(v0=matrix(bb_2_60$motif,ncol=1),v1=matrix(bb_2_60$motif_derivative,ncol=1)),
list(v0=matrix(cc_2_60$motif,ncol=1),v1=matrix(cc_2_60$motif_derivative,ncol=1)))
}
#Increasing lines
for(i in 9:9){
a_3_40=motifs_line(40,10,40,80,100)
b_3_40=motifs_line(40,10,40,80,100)
V_initt[[1]][[1]][[i]]=list(list(v0=(matrix(a_3_40$motif,ncol=1)),v1=(matrix(a_3_40$motif_derivative,ncol=1))),
list(v0=(matrix(b_3_40$motif,ncol=1)),v1=(matrix(b_3_40$motif_derivative,ncol=1))))
a_3_50=motifs_line(50,10,40,80,100)
b_3_50=motifs_line(50,10,40,80,100)
V_initt[[1]][[2]][[i]]=list(list(v0=(matrix(a_3_50$motif,ncol=1)),v1=(matrix(a_3_50$motif_derivative,ncol=1))),
list(v0=(matrix(b_3_50$motif,ncol=1)),v1=(matrix(b_3_50$motif_derivative,ncol=1))))
a_3_60=motifs_line(60,10,40,80,100)
b_3_60=motifs_line(60,10,40,80,100)
V_initt[[1]][[3]][[i]]=list(list(v0=(matrix(a_3_60$motif,ncol=1)),v1=(matrix(a_3_60$motif_derivative,ncol=1))),
list(v0=(matrix(b_3_60$motif,ncol=1)),v1=(matrix(b_3_60$motif_derivative,ncol=1))))
aa_3_40=motifs_line(40,10,40,80,100)
bb_3_40=motifs_line(40,10,40,80,100)
cc_3_40=motifs_line(40,10,40,80,100)
V_initt[[2]][[1]][[i]]=list(list(v0=matrix(aa_3_40$motif,ncol=1),v1=matrix(aa_3_40$motif_derivative,ncol=1)),
list(v0=matrix(bb_3_40$motif,ncol=1),v1=matrix(bb_3_40$motif_derivative,ncol=1)),
list(v0=matrix(cc_3_40$motif,ncol=1),v1=matrix(cc_3_40$motif_derivative,ncol=1)))
aa_3_50=motifs_line(50,10,40,80,100)
bb_3_50=motifs_line(50,10,40,80,100)
cc_3_50=motifs_line(50,10,40,80,100)
V_initt[[2]][[2]][[i]]=list(list(v0=matrix(aa_3_50$motif,ncol=1),v1=matrix(aa_3_50$motif_derivative,ncol=1)),
list(v0=matrix(bb_3_50$motif,ncol=1),v1=matrix(bb_3_50$motif_derivative,ncol=1)),
list(v0=matrix(cc_3_50$motif,ncol=1),v1=matrix(cc_3_50$motif_derivative,ncol=1)))
aa_3_60=motifs_line(60,10,40,80,100)
bb_3_60=motifs_line(60,10,40,80,100)
cc_3_60=motifs_line(60,10,40,80,100)
V_initt[[2]][[3]][[i]]=list(list(v0=matrix(aa_3_60$motif,ncol=1),v1=matrix(aa_3_60$motif_derivative,ncol=1)),
list(v0=matrix(bb_3_60$motif,ncol=1),v1=matrix(bb_3_60$motif_derivative,ncol=1)),
list(v0=matrix(cc_3_60$motif,ncol=1),v1=matrix(cc_3_60$motif_derivative,ncol=1)))
}
#Decreasing lines
for(i in 10:10){
a_4_40=motifs_line_rev(40,10,40,80,100)
b_4_40=motifs_line_rev(40,10,40,80,100)
V_initt[[1]][[1]][[i]]=list(list(v0=(matrix(a_4_40$motif,ncol=1)),v1=(matrix(a_4_40$motif_derivative,ncol=1))),
list(v0=(matrix(b_4_40$motif,ncol=1)),v1=(matrix(b_4_40$motif_derivative,ncol=1))))
a_4_50=motifs_line_rev(50,10,40,80,100)
b_4_50=motifs_line_rev(50,10,40,80,100)
V_initt[[1]][[2]][[i]]=list(list(v0=(matrix(a_4_50$motif,ncol=1)),v1=(matrix(a_4_50$motif_derivative,ncol=1))),
list(v0=(matrix(b_4_50$motif,ncol=1)),v1=(matrix(b_4_50$motif_derivative,ncol=1))))
a_4_60=motifs_line_rev(60,10,40,80,100)
b_4_60=motifs_line_rev(60,10,40,80,100)
V_initt[[1]][[3]][[i]]=list(list(v0=(matrix(a_4_60$motif,ncol=1)),v1=(matrix(a_4_60$motif_derivative,ncol=1))),
list(v0=(matrix(b_4_60$motif,ncol=1)),v1=(matrix(b_4_60$motif_derivative,ncol=1))))
aa_4_40=motifs_line_rev(40,10,40,80,100)
bb_4_40=motifs_line_rev(40,10,40,80,100)
cc_4_40=motifs_line_rev(40,10,40,80,100)
V_initt[[2]][[1]][[i]]=list(list(v0=matrix(aa_4_40$motif,ncol=1),v1=matrix(aa_4_40$motif_derivative,ncol=1)),
list(v0=matrix(bb_4_40$motif,ncol=1),v1=matrix(bb_4_40$motif_derivative,ncol=1)),
list(v0=matrix(cc_4_40$motif,ncol=1),v1=matrix(cc_4_40$motif_derivative,ncol=1)))
aa_4_50=motifs_line_rev(50,10,40,80,100)
bb_4_50=motifs_line_rev(50,10,40,80,100)
cc_4_50=motifs_line_rev(50,10,40,80,100)
V_initt[[2]][[2]][[i]]=list(list(v0=matrix(aa_4_50$motif,ncol=1),v1=matrix(aa_4_50$motif_derivative,ncol=1)),
list(v0=matrix(bb_4_50$motif,ncol=1),v1=matrix(bb_4_50$motif_derivative,ncol=1)),
list(v0=matrix(cc_4_50$motif,ncol=1),v1=matrix(cc_4_50$motif_derivative,ncol=1)))
aa_4_60=motifs_line_rev(60,10,40,80,100)
bb_4_60=motifs_line_rev(60,10,40,80,100)
cc_4_60=motifs_line_rev(60,10,40,80,100)
V_initt[[2]][[3]][[i]]=list(list(v0=matrix(aa_4_60$motif,ncol=1),v1=matrix(aa_4_60$motif_derivative,ncol=1)),
list(v0=matrix(bb_4_60$motif,ncol=1),v1=matrix(bb_4_60$motif_derivative,ncol=1)),
list(v0=matrix(cc_4_60$motif,ncol=1),v1=matrix(cc_4_60$motif_derivative,ncol=1)))
}
V_init=V_initt
K = c(2, 3) # number of clusters to try
c=c(40,50)
n_init = 4 # number of partially random initializations to try
# resize V_init
V_init[[1]] <- list(V_init[[1]][[1]],V_init[[1]][[2]])
V_init[[2]] <- list(V_init[[2]][[1]],V_init[[2]][[2]])
V_init[[1]][[1]] <- list(V_init[[1]][[1]][[1]],V_init[[1]][[1]][[2]],V_init[[1]][[1]][[3]],V_init[[1]][[1]][[4]])
V_init[[1]][[2]] <- list(V_init[[1]][[2]][[1]],V_init[[1]][[2]][[2]],V_init[[1]][[2]][[3]],V_init[[1]][[2]][[4]])
V_init[[2]][[1]] <- list(V_init[[2]][[1]][[1]],V_init[[2]][[1]][[2]],V_init[[2]][[1]][[3]],V_init[[2]][[1]][[4]])
V_init[[2]][[2]] <- list(V_init[[2]][[2]][[1]],V_init[[2]][[2]][[2]],V_init[[2]][[2]][[3]],V_init[[2]][[2]][[4]])
#set.seed(13333)
#files = list.files('./motifs_partially_random')
#It is necessary to use the candidate motifs in the folder
#motifs_partially_random in order to obtain the identical results of
#the article.
Y0=Y1=list()
for(i in 1:length(data_smoothed)){
Y0[[i]]=matrix(data_smoothed[[i]]$v0,ncol=1)
Y1[[i]]=matrix(data_smoothed[[i]]$v1,ncol=1)#Just the uncorrelated stocks
}
# find candidate motifs
find_candidate_motifs_results = ProbKMAcpp::find_candidate_motifs(Y0, Y1, K, c, n_init,V_init=V_init,
name = '../Test_comparisons/results/our/stock.1', names_var = 'x(t)',
probKMA_options = list(c_max = c_max, standardize = FALSE, iter_max = 1000,
iter4elong = iter4elong, trials_elong = trials_elong, max_gap = max_gap,
return_options = TRUE, return_init = TRUE,
diss = diss, alpha = alpha,transformed=TRUE),
plot = TRUE, exe_print = FALSE, n_threads = 7, set_seed = TRUE, worker_number = NULL)
find_candidate_motifs_results = find_candidate_motifs(Y0, Y1, K, c, n_init,V_init=V_init,
name = '../Test_comparisons/results/prof/stock.1', names_var = 'x(t)',
probKMA_options = list(c_max = c_max, standardize = FALSE, iter_max = 1000,
iter4elong = iter4elong, trials_elong = trials_elong, max_gap = max_gap,
return_options = TRUE, return_init = TRUE,
diss = diss, alpha = alpha,transformed=TRUE),
plot = TRUE, worker_number = NULL, set_seed = TRUE)
find_candidate_motifs_results = find_candidate_motifs(Y0, Y1, K, c, n_init,V_init=V_init,
name = '../Test_comparisons/results/prof/stock.1', names_var = 'x(t)',
probKMA_options = list(c_max = c_max, standardize = FALSE, iter_max = 1000,
iter4elong = iter4elong, trials_elong = trials_elong, max_gap = max_gap,
return_options = TRUE, return_init = TRUE,
diss = diss, alpha = alpha,transformed=TRUE),
plot = TRUE, worker_number = NULL, set_seed = TRUE)
source(file ="../Test_comparisons/previous_ProbKMA.R")
find_candidate_motifs_results = find_candidate_motifs(Y0, Y1, K, c, n_init,V_init=V_init,
name = '../Test_comparisons/results/prof/stock.1', names_var = 'x(t)',
probKMA_options = list(c_max = c_max, standardize = FALSE, iter_max = 1000,
iter4elong = iter4elong, trials_elong = trials_elong, max_gap = max_gap,
return_options = TRUE, return_init = TRUE,
diss = diss, alpha = alpha,transformed=TRUE),
plot = TRUE, worker_number = NULL, set_seed = TRUE)
load("C:/Users/buldo/OneDrive/Desktop/progetto pacs/probKMA/ProbKMA-FMD/Test_comparisons/results/our/stock.1_K2_c40/random1.RData")
a <- probKMA_results
load("C:/Users/buldo/OneDrive/Desktop/progetto pacs/probKMA/ProbKMA-FMD/Test_comparisons/results/prof/stock.1_K2_c40/random1.RData")
a$BC_dist_iter - probKMA_results$BC_dist_iter
load("C:/Users/buldo/OneDrive/Desktop/progetto pacs/probKMA/ProbKMA-FMD/Test_comparisons/results/our/stock.1_K2_c40/random2.RData")
load("C:/Users/buldo/OneDrive/Desktop/progetto pacs/probKMA/ProbKMA-FMD/Test_comparisons/results/our/stock.1_K2_c40/random2.RData")
b <- probKMA_results
load("C:/Users/buldo/OneDrive/Desktop/progetto pacs/probKMA/ProbKMA-FMD/Test_comparisons/results/prof/stock.1_K2_c40/random2.RData")
b$BC_dist_iter - probKMA_results$BC_dist_iter
library(ProbKMAcpp)
# seed for random initialization of P0 and S0
seed = 1
set.seed(seed)
# set type of distance
diss = 'd0_d1_L2' # try with d0_L2 d0_d1_L2 d1_L2
# null matrix for random initialization
P0= matrix()
S0= matrix()
params <- list(standardize=FALSE, K=2,c = 40,c_max = 70,iter_max = 1000,
quantile = 0.25,stopCriterion = 'max',tol = 1e-8,
iter4elong = 1,tol4elong = 1e-3,max_elong = 0.5,
trials_elong = 201, deltaJK_elong = 0.05,max_gap = 0,iter4clean = 50,
tol4clean = 1e-4,
quantile4clean = 1/2,return_options = TRUE,
m = 2,w = 1,alpha = 0.5,seed = seed,exe_print = TRUE,
set_seed = FALSE, n_threads = 7, transformed = TRUE)
# check input data are correct
# per usare v_init_test load(v_init_tes.RData), da gestire il caso in cui v_init è null
a <- initialChecks(simulated200$Y0,simulated200$Y1,P0,S0,params,diss, v_init_test)
load("C:/Users/buldo/OneDrive/Desktop/progetto pacs/probKMA/ProbKMA-FMD/Test_comparisons/v_init_test.RData")
# check input data are correct
# per usare v_init_test load(v_init_tes.RData), da gestire il caso in cui v_init è null
a <- initialChecks(simulated200$Y0,simulated200$Y1,P0,S0,params,diss, v_init_test)
# take checked data and parameters
params <- a$Parameters
data <- a$FuncData
# create an object of the class ProbKMA
prok = new(ProbKMA,data$Y,params,data$P0,data$S0,"H1", data$v_init) #data$v_init
# run the probKMA algorithm
output <- prok$probKMA_run()
# comparison with previous implementation
source(file ="../Test_comparisons/previous_ProbKMA.R") # @TODO: load using the library
true_output <- probKMA(Y0=simulated200$Y0,Y1=simulated200$Y1,standardize=params$standardize,
transformed = TRUE,K=params$K,c=params$c[1],c_max=params$c_max,
P0=data$P0,S0=data$S0,
diss=diss,alpha=params$alpha,w=params$w,m=params$m,v_init = v_init_test, # v_init_test
iter_max=params$iter_max,
stop_criterion=params$stopCriterion,
quantile=params$quantile,tol=params$tol,iter4elong=params$iter4elong,
tol4elong=params$tol4elong,max_elong=params$max_elong,
trials_elong=params$trials_elong,deltaJk_elong=params$deltaJK_elong,
max_gap=params$max_gap,params$iter4clean,params$tol4clean,
params$quantile4clean,params$return_options,return_init=TRUE,
worker_number=NULL)
true_output$BC_dist_iter - output$BC_dist_iter
View(true_output)
View(output)
